// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Node {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Node {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

parentIdx():number {
  return this.bb!.readInt32(this.bb_pos);
}

leftChildIdx():number {
  return this.bb!.readInt32(this.bb_pos + 4);
}

rightChildIdx():number {
  return this.bb!.readInt32(this.bb_pos + 8);
}

t():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
}

startMutIdx():number {
  return this.bb!.readInt32(this.bb_pos + 16);
}

static sizeOf():number {
  return 20;
}

static createNode(builder:flatbuffers.Builder, parent_idx: number, left_child_idx: number, right_child_idx: number, t: number, start_mut_idx: number):flatbuffers.Offset {
  builder.prep(4, 20);
  builder.writeInt32(start_mut_idx);
  builder.writeFloat32(t);
  builder.writeInt32(right_child_idx);
  builder.writeInt32(left_child_idx);
  builder.writeInt32(parent_idx);
  return builder.offset();
}

}
