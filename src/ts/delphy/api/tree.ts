// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DEPRECATED_Missation } from '../../delphy/api/deprecated-missation.js';
import { Missation } from '../../delphy/api/missation.js';
import { Mut } from '../../delphy/api/mut.js';
import { Node } from '../../delphy/api/node.js';
import { RealSeqLetter } from '../../delphy/api/real-seq-letter.js';


export class Tree {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Tree {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTree(bb:flatbuffers.ByteBuffer, obj?:Tree):Tree {
  return (obj || new Tree()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTree(bb:flatbuffers.ByteBuffer, obj?:Tree):Tree {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Tree()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nodes(index: number, obj?:Node):Node|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Node()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 20, this.bb!) : null;
}

nodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

muts(index: number, obj?:Mut):Mut|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Mut()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

mutsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rootSeq(index: number):RealSeqLetter|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

rootSeqLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rootSeqArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

rootNodeIdx():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

deprecatedMissations(index: number, obj?:DEPRECATED_Missation):DEPRECATED_Missation|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new DEPRECATED_Missation()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

deprecatedMissationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

missations(index: number, obj?:Missation):Missation|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Missation()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

missationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTree(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nodesOffset, 0);
}

static startNodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(20, numElems, 4);
}

static addMuts(builder:flatbuffers.Builder, mutsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mutsOffset, 0);
}

static startMutsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static addRootSeq(builder:flatbuffers.Builder, rootSeqOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rootSeqOffset, 0);
}

static createRootSeqVector(builder:flatbuffers.Builder, data:RealSeqLetter[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startRootSeqVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addRootNodeIdx(builder:flatbuffers.Builder, rootNodeIdx:number) {
  builder.addFieldInt32(3, rootNodeIdx, 0);
}

static addDeprecatedMissations(builder:flatbuffers.Builder, deprecatedMissationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, deprecatedMissationsOffset, 0);
}

static startDeprecatedMissationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static addMissations(builder:flatbuffers.Builder, missationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, missationsOffset, 0);
}

static startMissationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static endTree(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTree(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset, mutsOffset:flatbuffers.Offset, rootSeqOffset:flatbuffers.Offset, rootNodeIdx:number, deprecatedMissationsOffset:flatbuffers.Offset, missationsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Tree.startTree(builder);
  Tree.addNodes(builder, nodesOffset);
  Tree.addMuts(builder, mutsOffset);
  Tree.addRootSeq(builder, rootSeqOffset);
  Tree.addRootNodeIdx(builder, rootNodeIdx);
  Tree.addDeprecatedMissations(builder, deprecatedMissationsOffset);
  Tree.addMissations(builder, missationsOffset);
  return Tree.endTree(builder);
}
}
