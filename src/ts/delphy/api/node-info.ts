// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Amb } from '../../delphy/api/amb.js';


export class NodeInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NodeInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNodeInfo(bb:flatbuffers.ByteBuffer, obj?:NodeInfo):NodeInfo {
  return (obj || new NodeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNodeInfo(bb:flatbuffers.ByteBuffer, obj?:NodeInfo):NodeInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NodeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ambs(index: number, obj?:Amb):Amb|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Amb()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

ambsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startNodeInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addAmbs(builder:flatbuffers.Builder, ambsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ambsOffset, 0);
}

static startAmbsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static endNodeInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNodeInfo(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, ambsOffset:flatbuffers.Offset):flatbuffers.Offset {
  NodeInfo.startNodeInfo(builder);
  NodeInfo.addName(builder, nameOffset);
  NodeInfo.addAmbs(builder, ambsOffset);
  return NodeInfo.endNodeInfo(builder);
}
}
